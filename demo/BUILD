load("@rules_rust//rust:defs.bzl", "rust_binary")
load("@rules_cc//cc:defs.bzl", "cc_library")
load("//third-party/bazel:defs.bzl", "all_crate_deps")

# referenced by third-party/BUILD.
exports_files(["Cargo.toml"])

src = "src/main.rs"

rust_binary(
    name = "autocxx-demo",
    # FIXME: Do not use relative path.
    rustc_env = {"AUTOCXX_RS_FILE" : "../gen0.include.rs"},
    srcs = [
        src,
        ":bridge/generated",
    ],
    edition = "2018",
    deps = all_crate_deps(normal = True, package_name = "demo") + ["//:autocxx", ":bridge"],
)

filegroup(
    name = "lib",
    srcs = ["src/input.h"],
)

genrule(
    name = "bridge/generated",
    srcs = [src, ":lib"],
    outs = [
        "gen0.include.rs",
        "autocxxgen0.h",
        "cxx.h",
        "gen0.h",
        "gen0.cc",
    ],

    cmd = "$(location @autocxx.rs//:autocxx-gen)    \
               $(location %s)                       \
	       --inc  $$(dirname $(location %s))    \
               --outdir $(RULEDIR)                  \
               --gen-rs-include --gen-cpp           \
               --fix-rs-include-name                \
	       --generate-cxx-h                     \
	       --generate-exact 2" % (src, ":lib"),
    tools = ["@autocxx.rs//:autocxx-gen"],
)

# Since gen0.cc includes input.h, relocate the file.
# I know this is bad practice but Bazel has a difficult directory structure.
genrule(
    name = "bridge/relocation",
    srcs = [":lib"],
    outs = ["input.h"],
    cmd = "$$(mv $(location :lib) $(RULEDIR))",
)

# Build C++ library from the bridge code generated by autocxx-gen.
cc_library(
    name = "bridge",
    copts = ["-std=c++14"],
    srcs = ["gen0.cc", "input.h"],
    hdrs = ["cxx.h", "autocxxgen0.h", "gen0.h"],
)
