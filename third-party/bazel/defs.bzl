###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run @//third-party:vendor
###############################################################################
"""
# `crates_repository` API

- [aliases](#aliases)
- [crate_deps](#crate_deps)
- [all_crate_deps](#all_crate_deps)
- [crate_repositories](#crate_repositories)

"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

###############################################################################
# MACROS API
###############################################################################

# An identifier that represent common dependencies (unconditional).
_COMMON_CONDITION = ""

def _flatten_dependency_maps(all_dependency_maps):
    """Flatten a list of dependency maps into one dictionary.

    Dependency maps have the following structure:

    ```python
    DEPENDENCIES_MAP = {
        # The first key in the map is a Bazel package
        # name of the workspace this file is defined in.
        "workspace_member_package": {

            # Not all dependnecies are supported for all platforms.
            # the condition key is the condition required to be true
            # on the host platform.
            "condition": {

                # An alias to a crate target.     # The label of the crate target the
                # Aliases are only crate names.   # package name refers to.
                "package_name":                   "@full//:label",
            }
        }
    }
    ```

    Args:
        all_dependency_maps (list): A list of dicts as described above

    Returns:
        dict: A dictionary as described above
    """
    dependencies = {}

    for workspace_deps_map in all_dependency_maps:
        for pkg_name, conditional_deps_map in workspace_deps_map.items():
            if pkg_name not in dependencies:
                non_frozen_map = dict()
                for key, values in conditional_deps_map.items():
                    non_frozen_map.update({key: dict(values.items())})
                dependencies.setdefault(pkg_name, non_frozen_map)
                continue

            for condition, deps_map in conditional_deps_map.items():
                # If the condition has not been recorded, do so and continue
                if condition not in dependencies[pkg_name]:
                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))
                    continue

                # Alert on any miss-matched dependencies
                inconsistent_entries = []
                for crate_name, crate_label in deps_map.items():
                    existing = dependencies[pkg_name][condition].get(crate_name)
                    if existing and existing != crate_label:
                        inconsistent_entries.append((crate_name, existing, crate_label))
                    dependencies[pkg_name][condition].update({crate_name: crate_label})

    return dependencies

def crate_deps(deps, package_name = None):
    """Finds the fully qualified label of the requested crates for the package where this macro is called.

    Args:
        deps (list): The desired list of crate targets.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()`.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if not deps:
        return []

    if package_name == None:
        package_name = native.package_name()

    # Join both sets of dependencies
    dependencies = _flatten_dependency_maps([
        _NORMAL_DEPENDENCIES,
        _NORMAL_DEV_DEPENDENCIES,
        _PROC_MACRO_DEPENDENCIES,
        _PROC_MACRO_DEV_DEPENDENCIES,
        _BUILD_DEPENDENCIES,
        _BUILD_PROC_MACRO_DEPENDENCIES,
    ]).pop(package_name, {})

    # Combine all conditional packages so we can easily index over a flat list
    # TODO: Perhaps this should actually return select statements and maintain
    # the conditionals of the dependencies
    flat_deps = {}
    for deps_set in dependencies.values():
        for crate_name, crate_label in deps_set.items():
            flat_deps.update({crate_name: crate_label})

    missing_crates = []
    crate_targets = []
    for crate_target in deps:
        if crate_target not in flat_deps:
            missing_crates.append(crate_target)
        else:
            crate_targets.append(flat_deps[crate_target])

    if missing_crates:
        fail("Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`".format(
            missing_crates,
            package_name,
            dependencies,
        ))

    return crate_targets

def all_crate_deps(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Finds the fully qualified label of all requested direct crate dependencies \
    for the package where this macro is called.

    If no parameters are set, all normal dependencies are returned. Setting any one flag will
    otherwise impact the contents of the returned list.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_dependency_maps = []
    if normal:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)
    if normal_dev:
        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)
    if proc_macro:
        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)
    if proc_macro_dev:
        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)
    if build:
        all_dependency_maps.append(_BUILD_DEPENDENCIES)
    if build_proc_macro:
        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)

    # Default to always using normal dependencies
    if not all_dependency_maps:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)

    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)

    if not dependencies:
        if dependencies == None:
            fail("Tried to get all_crate_deps for package " + package_name + " but that package had no Cargo.toml file")
        else:
            return []

    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())
    for condition, deps in dependencies.items():
        crate_deps += selects.with_or({_CONDITIONS[condition]: deps.values()})

    return crate_deps

def aliases(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Produces a map of Crate alias names to their original label

    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.
    Setting any one flag will otherwise determine the contents of the returned dict.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        dict: The aliases of all associated packages
    """
    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_aliases_maps = []
    if normal:
        all_aliases_maps.append(_NORMAL_ALIASES)
    if normal_dev:
        all_aliases_maps.append(_NORMAL_DEV_ALIASES)
    if proc_macro:
        all_aliases_maps.append(_PROC_MACRO_ALIASES)
    if proc_macro_dev:
        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)
    if build:
        all_aliases_maps.append(_BUILD_ALIASES)
    if build_proc_macro:
        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)

    # Default to always using normal aliases
    if not all_aliases_maps:
        all_aliases_maps.append(_NORMAL_ALIASES)
        all_aliases_maps.append(_PROC_MACRO_ALIASES)

    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)

    if not aliases:
        return dict()

    common_items = aliases.pop(_COMMON_CONDITION, {}).items()

    # If there are only common items in the dictionary, immediately return them
    if not len(aliases.keys()) == 1:
        return dict(common_items)

    # Build a single select statement where each conditional has accounted for the
    # common set of aliases.
    crate_aliases = {"//conditions:default": common_items}
    for condition, deps in aliases.items():
        condition_triples = _CONDITIONS[condition]
        if condition_triples in crate_aliases:
            crate_aliases[condition_triples].update(deps)
        else:
            crate_aliases.update({_CONDITIONS[condition]: dict(deps.items() + common_items)})

    return selects.with_or(crate_aliases)

###############################################################################
# WORKSPACE MEMBER DEPS AND ALIASES
###############################################################################

_NORMAL_DEPENDENCIES = {
    "third-party": {
        _COMMON_CONDITION: {
            "autocxx-bindgen": "@vendor__autocxx-bindgen-0.62.1//:autocxx_bindgen",
            "cc": "@vendor__cc-1.0.79//:cc",
            "clap": "@vendor__clap-3.2.23//:clap",
            "cxx": "@vendor__cxx-1.0.91//:cxx",
            "cxx-gen": "@vendor__cxx-gen-0.7.91//:cxx_gen",
            "env_logger": "@vendor__env_logger-0.9.3//:env_logger",
            "indexmap": "@vendor__indexmap-1.9.2//:indexmap",
            "itertools": "@vendor__itertools-0.10.5//:itertools",
            "log": "@vendor__log-0.4.17//:log",
            "miette": "@vendor__miette-5.5.0//:miette",
            "moveit": "@vendor__moveit-0.5.1//:moveit",
            "once_cell": "@vendor__once_cell-1.17.1//:once_cell",
            "pathdiff": "@vendor__pathdiff-0.2.1//:pathdiff",
            "prettyplease": "@vendor__prettyplease-0.1.23//:prettyplease",
            "proc-macro-error": "@vendor__proc-macro-error-1.0.4//:proc_macro_error",
            "proc-macro2": "@vendor__proc-macro2-1.0.51//:proc_macro2",
            "quote": "@vendor__quote-1.0.23//:quote",
            "regex": "@vendor__regex-1.7.1//:regex",
            "serde": "@vendor__serde-1.0.152//:serde",
            "serde_json": "@vendor__serde_json-1.0.93//:serde_json",
            "syn": "@vendor__syn-1.0.107//:syn",
            "tempfile": "@vendor__tempfile-3.3.0//:tempfile",
            "thiserror": "@vendor__thiserror-1.0.38//:thiserror",
            "version_check": "@vendor__version_check-0.9.4//:version_check",
        },
    },
}

_NORMAL_ALIASES = {
    "third-party": {
        _COMMON_CONDITION: {
        },
    },
}

_NORMAL_DEV_DEPENDENCIES = {
    "third-party": {
    },
}

_NORMAL_DEV_ALIASES = {
    "third-party": {
    },
}

_PROC_MACRO_DEPENDENCIES = {
    "third-party": {
        _COMMON_CONDITION: {
            "aquamarine": "@vendor__aquamarine-0.1.12//:aquamarine",
            "indoc": "@vendor__indoc-1.0.9//:indoc",
            "rustversion": "@vendor__rustversion-1.0.11//:rustversion",
            "strum_macros": "@vendor__strum_macros-0.24.3//:strum_macros",
        },
    },
}

_PROC_MACRO_ALIASES = {
    "third-party": {
    },
}

_PROC_MACRO_DEV_DEPENDENCIES = {
    "third-party": {
    },
}

_PROC_MACRO_DEV_ALIASES = {
    "third-party": {
    },
}

_BUILD_DEPENDENCIES = {
    "third-party": {
    },
}

_BUILD_ALIASES = {
    "third-party": {
    },
}

_BUILD_PROC_MACRO_DEPENDENCIES = {
    "third-party": {
    },
}

_BUILD_PROC_MACRO_ALIASES = {
    "third-party": {
    },
}

_CONDITIONS = {
    "cfg(all(target_arch = \"wasm32\", not(target_os = \"wasi\")))": ["wasm32-unknown-unknown"],
    "cfg(any(unix, target_os = \"wasi\"))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "wasm32-wasi", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(target_os = \"hermit\")": [],
    "cfg(target_os = \"redox\")": [],
    "cfg(unix)": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(windows)": ["aarch64-pc-windows-msvc", "i686-pc-windows-msvc", "x86_64-pc-windows-msvc"],
    "i686-pc-windows-gnu": [],
    "x86_64-pc-windows-gnu": [],
}

###############################################################################

def crate_repositories():
    """A macro for defining repositories for all generated crates"""
    maybe(
        http_archive,
        name = "vendor__aho-corasick-0.7.20",
        sha256 = "cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/aho-corasick/0.7.20/download"],
        strip_prefix = "aho-corasick-0.7.20",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.aho-corasick-0.7.20.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__aquamarine-0.1.12",
        sha256 = "a941c39708478e8eea39243b5983f1c42d2717b3620ee91f4a52115fd02ac43f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/aquamarine/0.1.12/download"],
        strip_prefix = "aquamarine-0.1.12",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.aquamarine-0.1.12.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__atty-0.2.14",
        sha256 = "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/atty/0.2.14/download"],
        strip_prefix = "atty-0.2.14",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.atty-0.2.14.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__autocfg-1.1.0",
        sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/autocfg/1.1.0/download"],
        strip_prefix = "autocfg-1.1.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.autocfg-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__autocxx-bindgen-0.62.1",
        sha256 = "91f11671d76c2c02f3e6906bb06b13a9046cd069d095ff14a94d9c9a7bd40a20",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/autocxx-bindgen/0.62.1/download"],
        strip_prefix = "autocxx-bindgen-0.62.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.autocxx-bindgen-0.62.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__bitflags-1.3.2",
        sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bitflags/1.3.2/download"],
        strip_prefix = "bitflags-1.3.2",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.bitflags-1.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__cc-1.0.79",
        sha256 = "50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cc/1.0.79/download"],
        strip_prefix = "cc-1.0.79",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.cc-1.0.79.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__cexpr-0.6.0",
        sha256 = "6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cexpr/0.6.0/download"],
        strip_prefix = "cexpr-0.6.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.cexpr-0.6.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__cfg-if-1.0.0",
        sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cfg-if/1.0.0/download"],
        strip_prefix = "cfg-if-1.0.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.cfg-if-1.0.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__clang-sys-1.6.0",
        sha256 = "77ed9a53e5d4d9c573ae844bfac6872b159cb1d1585a83b29e7a64b7eef7332a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/clang-sys/1.6.0/download"],
        strip_prefix = "clang-sys-1.6.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.clang-sys-1.6.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__clap-3.2.23",
        sha256 = "71655c45cb9845d3270c9d6df84ebe72b4dad3c2ba3f7023ad47c144e4e473a5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/clap/3.2.23/download"],
        strip_prefix = "clap-3.2.23",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.clap-3.2.23.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__clap_lex-0.2.4",
        sha256 = "2850f2f5a82cbf437dd5af4d49848fbdfc27c157c3d010345776f952765261c5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/clap_lex/0.2.4/download"],
        strip_prefix = "clap_lex-0.2.4",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.clap_lex-0.2.4.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__codespan-reporting-0.11.1",
        sha256 = "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/codespan-reporting/0.11.1/download"],
        strip_prefix = "codespan-reporting-0.11.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.codespan-reporting-0.11.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__cxx-1.0.91",
        sha256 = "86d3488e7665a7a483b57e25bdd90d0aeb2bc7608c8d0346acf2ad3f1caf1d62",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cxx/1.0.91/download"],
        strip_prefix = "cxx-1.0.91",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.cxx-1.0.91.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__cxx-gen-0.7.91",
        sha256 = "406f2c382fded54902d17a552e7a221121fc5cc2abc39653b323394117330feb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cxx-gen/0.7.91/download"],
        strip_prefix = "cxx-gen-0.7.91",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.cxx-gen-0.7.91.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__cxxbridge-flags-1.0.91",
        sha256 = "a2ef98b8b717a829ca5603af80e1f9e2e48013ab227b68ef37872ef84ee479bf",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cxxbridge-flags/1.0.91/download"],
        strip_prefix = "cxxbridge-flags-1.0.91",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.cxxbridge-flags-1.0.91.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__cxxbridge-macro-1.0.91",
        sha256 = "086c685979a698443656e5cf7856c95c642295a38599f12fb1ff76fb28d19892",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cxxbridge-macro/1.0.91/download"],
        strip_prefix = "cxxbridge-macro-1.0.91",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.cxxbridge-macro-1.0.91.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__either-1.8.1",
        sha256 = "7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/either/1.8.1/download"],
        strip_prefix = "either-1.8.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.either-1.8.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__env_logger-0.9.3",
        sha256 = "a12e6657c4c97ebab115a42dcee77225f7f482cdd841cf7088c657a42e9e00e7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/env_logger/0.9.3/download"],
        strip_prefix = "env_logger-0.9.3",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.env_logger-0.9.3.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__fastrand-1.9.0",
        sha256 = "e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fastrand/1.9.0/download"],
        strip_prefix = "fastrand-1.9.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.fastrand-1.9.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__glob-0.3.1",
        sha256 = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/glob/0.3.1/download"],
        strip_prefix = "glob-0.3.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.glob-0.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__hashbrown-0.12.3",
        sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hashbrown/0.12.3/download"],
        strip_prefix = "hashbrown-0.12.3",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.hashbrown-0.12.3.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__heck-0.4.1",
        sha256 = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/heck/0.4.1/download"],
        strip_prefix = "heck-0.4.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.heck-0.4.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__hermit-abi-0.1.19",
        sha256 = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hermit-abi/0.1.19/download"],
        strip_prefix = "hermit-abi-0.1.19",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.hermit-abi-0.1.19.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__humantime-2.1.0",
        sha256 = "9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/humantime/2.1.0/download"],
        strip_prefix = "humantime-2.1.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.humantime-2.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__indexmap-1.9.2",
        sha256 = "1885e79c1fc4b10f0e172c475f458b7f7b93061064d98c3293e98c5ba0c8b399",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/indexmap/1.9.2/download"],
        strip_prefix = "indexmap-1.9.2",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.indexmap-1.9.2.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__indoc-1.0.9",
        sha256 = "bfa799dd5ed20a7e349f3b4639aa80d74549c81716d9ec4f994c9b5815598306",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/indoc/1.0.9/download"],
        strip_prefix = "indoc-1.0.9",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.indoc-1.0.9.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__instant-0.1.12",
        sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/instant/0.1.12/download"],
        strip_prefix = "instant-0.1.12",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.instant-0.1.12.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__itertools-0.10.5",
        sha256 = "b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/itertools/0.10.5/download"],
        strip_prefix = "itertools-0.10.5",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.itertools-0.10.5.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__itertools-0.9.0",
        sha256 = "284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/itertools/0.9.0/download"],
        strip_prefix = "itertools-0.9.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.itertools-0.9.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__itoa-1.0.5",
        sha256 = "fad582f4b9e86b6caa621cabeb0963332d92eea04729ab12892c2533951e6440",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/itoa/1.0.5/download"],
        strip_prefix = "itoa-1.0.5",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.itoa-1.0.5.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__lazy_static-1.4.0",
        sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/lazy_static/1.4.0/download"],
        strip_prefix = "lazy_static-1.4.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.lazy_static-1.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__lazycell-1.3.0",
        sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/lazycell/1.3.0/download"],
        strip_prefix = "lazycell-1.3.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.lazycell-1.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__libc-0.2.139",
        sha256 = "201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/libc/0.2.139/download"],
        strip_prefix = "libc-0.2.139",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.libc-0.2.139.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__libloading-0.7.4",
        sha256 = "b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/libloading/0.7.4/download"],
        strip_prefix = "libloading-0.7.4",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.libloading-0.7.4.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__link-cplusplus-1.0.8",
        sha256 = "ecd207c9c713c34f95a097a5b029ac2ce6010530c7b49d7fea24d977dede04f5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/link-cplusplus/1.0.8/download"],
        strip_prefix = "link-cplusplus-1.0.8",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.link-cplusplus-1.0.8.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__log-0.4.17",
        sha256 = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/log/0.4.17/download"],
        strip_prefix = "log-0.4.17",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.log-0.4.17.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__memchr-2.5.0",
        sha256 = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/memchr/2.5.0/download"],
        strip_prefix = "memchr-2.5.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.memchr-2.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__miette-5.5.0",
        sha256 = "4afd9b301defa984bbdbe112b4763e093ed191750a0d914a78c1106b2d0fe703",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/miette/5.5.0/download"],
        strip_prefix = "miette-5.5.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.miette-5.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__miette-derive-5.5.0",
        sha256 = "97c2401ab7ac5282ca5c8b518a87635b1a93762b0b90b9990c509888eeccba29",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/miette-derive/5.5.0/download"],
        strip_prefix = "miette-derive-5.5.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.miette-derive-5.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__minimal-lexical-0.2.1",
        sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/minimal-lexical/0.2.1/download"],
        strip_prefix = "minimal-lexical-0.2.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.minimal-lexical-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__moveit-0.5.1",
        sha256 = "d7d756ffe4e38013507d35bf726a93fcdae2cae043ab5ce477f13857a335030d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/moveit/0.5.1/download"],
        strip_prefix = "moveit-0.5.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.moveit-0.5.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__nom-7.1.3",
        sha256 = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/nom/7.1.3/download"],
        strip_prefix = "nom-7.1.3",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.nom-7.1.3.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__once_cell-1.17.1",
        sha256 = "b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/once_cell/1.17.1/download"],
        strip_prefix = "once_cell-1.17.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.once_cell-1.17.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__os_str_bytes-6.4.1",
        sha256 = "9b7820b9daea5457c9f21c69448905d723fbd21136ccf521748f23fd49e723ee",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/os_str_bytes/6.4.1/download"],
        strip_prefix = "os_str_bytes-6.4.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.os_str_bytes-6.4.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__pathdiff-0.2.1",
        sha256 = "8835116a5c179084a830efb3adc117ab007512b535bc1a21c991d3b32a6b44dd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pathdiff/0.2.1/download"],
        strip_prefix = "pathdiff-0.2.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.pathdiff-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__peeking_take_while-0.1.2",
        sha256 = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/peeking_take_while/0.1.2/download"],
        strip_prefix = "peeking_take_while-0.1.2",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.peeking_take_while-0.1.2.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__prettyplease-0.1.23",
        sha256 = "e97e3215779627f01ee256d2fad52f3d95e8e1c11e9fc6fd08f7cd455d5d5c78",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prettyplease/0.1.23/download"],
        strip_prefix = "prettyplease-0.1.23",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.prettyplease-0.1.23.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__proc-macro-error-1.0.4",
        sha256 = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro-error/1.0.4/download"],
        strip_prefix = "proc-macro-error-1.0.4",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.proc-macro-error-1.0.4.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__proc-macro-error-attr-1.0.4",
        sha256 = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro-error-attr/1.0.4/download"],
        strip_prefix = "proc-macro-error-attr-1.0.4",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.proc-macro-error-attr-1.0.4.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__proc-macro2-1.0.51",
        sha256 = "5d727cae5b39d21da60fa540906919ad737832fe0b1c165da3a34d6548c849d6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro2/1.0.51/download"],
        strip_prefix = "proc-macro2-1.0.51",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.proc-macro2-1.0.51.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__quote-1.0.23",
        sha256 = "8856d8364d252a14d474036ea1358d63c9e6965c8e5c1885c18f73d70bff9c7b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/quote/1.0.23/download"],
        strip_prefix = "quote-1.0.23",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.quote-1.0.23.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__redox_syscall-0.2.16",
        sha256 = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/redox_syscall/0.2.16/download"],
        strip_prefix = "redox_syscall-0.2.16",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.redox_syscall-0.2.16.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__regex-1.7.1",
        sha256 = "48aaa5748ba571fb95cd2c85c09f629215d3a6ece942baa100950af03a34f733",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/regex/1.7.1/download"],
        strip_prefix = "regex-1.7.1",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.regex-1.7.1.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__regex-syntax-0.6.28",
        sha256 = "456c603be3e8d448b072f410900c09faf164fbce2d480456f50eea6e25f9c848",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/regex-syntax/0.6.28/download"],
        strip_prefix = "regex-syntax-0.6.28",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.regex-syntax-0.6.28.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__remove_dir_all-0.5.3",
        sha256 = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/remove_dir_all/0.5.3/download"],
        strip_prefix = "remove_dir_all-0.5.3",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.remove_dir_all-0.5.3.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__rustc-hash-1.1.0",
        sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rustc-hash/1.1.0/download"],
        strip_prefix = "rustc-hash-1.1.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.rustc-hash-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__rustversion-1.0.11",
        sha256 = "5583e89e108996506031660fe09baa5011b9dd0341b89029313006d1fb508d70",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rustversion/1.0.11/download"],
        strip_prefix = "rustversion-1.0.11",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.rustversion-1.0.11.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__ryu-1.0.12",
        sha256 = "7b4b9743ed687d4b4bcedf9ff5eaa7398495ae14e61cba0a295704edbc7decde",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ryu/1.0.12/download"],
        strip_prefix = "ryu-1.0.12",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.ryu-1.0.12.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__serde-1.0.152",
        sha256 = "bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde/1.0.152/download"],
        strip_prefix = "serde-1.0.152",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.serde-1.0.152.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__serde_derive-1.0.152",
        sha256 = "af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde_derive/1.0.152/download"],
        strip_prefix = "serde_derive-1.0.152",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.serde_derive-1.0.152.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__serde_json-1.0.93",
        sha256 = "cad406b69c91885b5107daf2c29572f6c8cdb3c66826821e286c533490c0bc76",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde_json/1.0.93/download"],
        strip_prefix = "serde_json-1.0.93",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.serde_json-1.0.93.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__shlex-1.1.0",
        sha256 = "43b2853a4d09f215c24cc5489c992ce46052d359b5109343cbafbf26bc62f8a3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/shlex/1.1.0/download"],
        strip_prefix = "shlex-1.1.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.shlex-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__strsim-0.10.0",
        sha256 = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/strsim/0.10.0/download"],
        strip_prefix = "strsim-0.10.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.strsim-0.10.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__strum_macros-0.24.3",
        sha256 = "1e385be0d24f186b4ce2f9982191e7101bb737312ad61c1f2f984f34bcf85d59",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/strum_macros/0.24.3/download"],
        strip_prefix = "strum_macros-0.24.3",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.strum_macros-0.24.3.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__syn-1.0.107",
        sha256 = "1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/syn/1.0.107/download"],
        strip_prefix = "syn-1.0.107",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.syn-1.0.107.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__tempfile-3.3.0",
        sha256 = "5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tempfile/3.3.0/download"],
        strip_prefix = "tempfile-3.3.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.tempfile-3.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__termcolor-1.2.0",
        sha256 = "be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/termcolor/1.2.0/download"],
        strip_prefix = "termcolor-1.2.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.termcolor-1.2.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__textwrap-0.16.0",
        sha256 = "222a222a5bfe1bba4a77b45ec488a741b3cb8872e5e499451fd7d0129c9c7c3d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/textwrap/0.16.0/download"],
        strip_prefix = "textwrap-0.16.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.textwrap-0.16.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__thiserror-1.0.38",
        sha256 = "6a9cd18aa97d5c45c6603caea1da6628790b37f7a34b6ca89522331c5180fed0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/thiserror/1.0.38/download"],
        strip_prefix = "thiserror-1.0.38",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.thiserror-1.0.38.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__thiserror-impl-1.0.38",
        sha256 = "1fb327af4685e4d03fa8cbcf1716380da910eeb2bb8be417e7f9fd3fb164f36f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/thiserror-impl/1.0.38/download"],
        strip_prefix = "thiserror-impl-1.0.38",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.thiserror-impl-1.0.38.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__unicode-ident-1.0.6",
        sha256 = "84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-ident/1.0.6/download"],
        strip_prefix = "unicode-ident-1.0.6",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.unicode-ident-1.0.6.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__unicode-width-0.1.10",
        sha256 = "c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-width/0.1.10/download"],
        strip_prefix = "unicode-width-0.1.10",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.unicode-width-0.1.10.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__version_check-0.9.4",
        sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/version_check/0.9.4/download"],
        strip_prefix = "version_check-0.9.4",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.version_check-0.9.4.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__which-4.4.0",
        sha256 = "2441c784c52b289a054b7201fc93253e288f094e2f4be9058343127c4226a269",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/which/4.4.0/download"],
        strip_prefix = "which-4.4.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.which-4.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__winapi-0.3.9",
        sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi/0.3.9/download"],
        strip_prefix = "winapi-0.3.9",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.winapi-0.3.9.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__winapi-i686-pc-windows-gnu-0.4.0",
        sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-i686-pc-windows-gnu/0.4.0/download"],
        strip_prefix = "winapi-i686-pc-windows-gnu-0.4.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.winapi-i686-pc-windows-gnu-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__winapi-util-0.1.5",
        sha256 = "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-util/0.1.5/download"],
        strip_prefix = "winapi-util-0.1.5",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.winapi-util-0.1.5.bazel"),
    )

    maybe(
        http_archive,
        name = "vendor__winapi-x86_64-pc-windows-gnu-0.4.0",
        sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-x86_64-pc-windows-gnu/0.4.0/download"],
        strip_prefix = "winapi-x86_64-pc-windows-gnu-0.4.0",
        build_file = Label("@autocxx.rs//third-party/bazel:BUILD.winapi-x86_64-pc-windows-gnu-0.4.0.bazel"),
    )
